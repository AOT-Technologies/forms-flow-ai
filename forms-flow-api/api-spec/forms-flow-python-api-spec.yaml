openapi: 3.0.1
info:
  title: formsflow.ai API
  description: "The API for formsflow.ai. Checkout: formsflow.ai to know more"
  version: "1.0"
servers:
- url: 'http://localhost:5000'
- url: 'http://{{baseurl}}'
security:
- apikey: []
tags:
- name: Application
  description: "Manages form submissions, creating, retrieving, updating, managing\
    \ submission data,                    and tracking submission history."
- name: Metrics
  description: Endpoints for retrieving application metrics.
- name: Checkpoint
  description: Verify the application's health status.
- name: Dashboards
  description: Dashboard APIs for data analysis and insights generation.
- name: Form
  description: "Manages form lifecycle, including creation, update, listing,     \
    \            deletion, retrieval, validation, publish, unpublish, and history."
- name: Groups
  description: Keycloak wrapper groups APIs for dashbard.
- name: Process
  description: Manages process/workflow operations.
- name: Public
  description: Public APIs.
- name: User
  description: Handles APIs for Keycloak user management and maintains the user database.
- name: Draft
  description: Manage Drafts.
- name: Formio
  description: Formio wrapper APIs.
- name: Authorization
  description: "Manages form editing, viewing, submissions, and dashboard authorizations."
- name: Filter
  description: "Manages filters for review tasks, including creation, retrieval, updating,\
    \ and deletion."
- name: Roles
  description: Keycloak roles/groups wrapper APIs.
- name: Embed
  description: APIs for form embeding.
- name: Integration
  description: iPaas related endpoints.
- name: Themes
  description: Theme Customization APIs.
- name: Import
  description: Handles form and workflow import.
paths:
  /application:
    get:
      tags:
      - Application
      summary: Get applications
      operationId: get_applications_resource
      parameters:
      - name: pageNo
        in: query
        description: Page number for paginated results
        schema:
          type: string
          default: "1"
      - name: limit
        in: query
        description: Limit for paginated results
        schema:
          type: string
          default: "5"
      - name: sortBy
        in: query
        description: Specify field for sorting the results.
        schema:
          type: string
          default: id
      - name: sortOrder
        in: query
        description: Specify sorting  order.
        schema:
          type: string
          default: desc
      - name: applicationName
        in: query
        description: Filter resources by application name.
        schema:
          type: string
      - name: Id
        in: query
        description: Filter resources by id.
        schema:
          type: integer
      - name: modifiedFrom
        in: query
        description: Filter resources by modified from.
        schema:
          type: string
      - name: modifiedTo
        in: query
        description: Filter resources by modified to.
        schema:
          type: string
      - name: createdBy
        in: query
        description: Filter resources by created by.
        schema:
          type: string
      - name: createdFrom
        in: query
        description: Filter resources by created from.
        schema:
          type: string
      - name: createdTo
        in: query
        description: Filter resources by created to.
        schema:
          type: string
      - name: applicationStatus
        in: query
        description: Filter resources by application status.
        schema:
          type: string
      - name: parentFormId
        in: query
        description: Filter resources by parent form id.
        schema:
          type: string
      - name: createdUserSubmissions
        in: query
        description: Return user created submissions.
        schema:
          type: boolean
      - name: includeDrafts
        in: query
        description: Return submissions and drafts/Specific to client permission.
        schema:
          type: boolean
      - name: onlyDrafts
        in: query
        description: Return only drafts/Specific to client permission.
        schema:
          type: boolean
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationList'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
  /application/create:
    post:
      tags:
      - Application
      summary: Post a new application using the request body
      description: |-
        e.g,
        ```
        {
           "formId":"632208d9fbcab29c2ab1a097",
           "submissionId":"63407583fbcab29c2ab1bed4",
           "formUrl":"https://formsflow-forms/form/632208d9fbcab29c2ab1a097/submission/63407583fbcab29c2ab1bed4",
           "webFormUrl":"https://formsflow-web/form/632208d9fbcab29c2ab1a097/submission/63407583fbcab29c2ab1bed4"
        }
        ```
      operationId: post_application_resources_by_ids
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationCreate'
        required: true
      responses:
        "201":
          description: CREATED:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationCreationResponse'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
      x-codegen-request-body-name: payload
  /application/formid/{form_id}:
    get:
      tags:
      - Application
      summary: Get applications by formId
      operationId: get_application_resource_by_form_id
      parameters:
      - name: form_id
        in: path
        required: true
        schema:
          type: string
      - name: pageNo
        in: query
        description: Page number for paginated results
        schema:
          type: string
          default: "1"
      - name: limit
        in: query
        description: Limit for paginated results
        schema:
          type: string
          default: "5"
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationList'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
  /application/formid/{form_id}/count:
    get:
      tags:
      - Application
      summary: Get application count by formId
      operationId: get_application_resource_count_by_form_id
      parameters:
      - name: form_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationCountModel'
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
  /application/status/list:
    get:
      tags:
      - Application
      summary: Retrieve the list of application statuses
      operationId: get_application_resource_by_application_status
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusList'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
  /application/{application_id}:
    get:
      tags:
      - Application
      summary: Get application by id
      operationId: get_application_resource_by_id
      parameters:
      - name: application_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
    put:
      tags:
      - Application
      summary: Update either an application or a draft
      description: "Provide `applicationStatus` and `formUrl` for an application update,\
        \ or                    `data` for a draft update."
      operationId: put_application_resource_by_id
      parameters:
      - name: application_id
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationUpdate'
        required: true
      responses:
        "200":
          description: OK:- Successful request.
          content: {}
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
      x-codegen-request-body-name: payload
    delete:
      tags:
      - Application
      summary: Delete draft application
      operationId: delete_application_resource_by_id
      parameters:
      - name: application_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
  /application/{application_id}/history:
    get:
      tags:
      - Application
      summary: Retrieve the history of an application based on the application ID
      operationId: get_application_history_resource
      parameters:
      - name: application_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationHistoryList'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
    post:
      tags:
      - Application
      summary: Create a new application history entry from the request body
      operationId: post_application_history_resource
      parameters:
      - name: application_id
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationHistoryCreate'
        required: true
      responses:
        "201":
          description: CREATED:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationHistory'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
      x-codegen-request-body-name: payload
  /application/{application_id}/resubmit:
    post:
      tags:
      - Application
      summary: Resubmit application
      operationId: post_application_resubmit_by_id
      parameters:
      - name: application_id
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationResubmitModel'
        required: true
      responses:
        "200":
          description: OK:- Successful request.
          content: {}
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
        "403":
          description: FORBIDDEN:- Permission denied
          content: {}
      x-codegen-request-body-name: payload
  /application/{application_id}/submit:
    put:
      tags:
      - Application
      summary: Updates the draft to actual submission
      operationId: put_draft_submission_resource
      parameters:
      - name: application_id
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationCreate'
        required: true
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationCreationResponse'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
      x-codegen-request-body-name: payload
  /authorizations/resource/{resource_id}:
    get:
      tags:
      - Authorization
      summary: Fetch Authorization list by resource id
      operationId: get_authorization_list_by_id
      parameters:
      - name: resource_id
        in: path
        description: Authorization list corresponding to resource id.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationList'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
    post:
      tags:
      - Authorization
      summary: Create or Update Authoization of Form by id
      operationId: post_authorization_list_by_id
      parameters:
      - name: resource_id
        in: path
        description: Authorization list corresponding to resource id.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationList'
        required: true
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationList'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
      x-codegen-request-body-name: payload
  /authorizations/users/{auth_type}:
    get:
      tags:
      - Authorization
      summary: List all authorization for the current user
      description: List authorizations for the current user based on authorization
        type.
      operationId: get_user_authorization_list
      parameters:
      - name: auth_type
        in: path
        description: Type of authorization ```dashboard/form/application/designer```
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Authorization'
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
  /authorizations/{auth_type}:
    get:
      tags:
      - Authorization
      summary: List all authorization
      description: Get all authorizations based on authorization type.
      operationId: get_authorization_list
      parameters:
      - name: auth_type
        in: path
        description: Type of authorization ```dashboard/form/application/designer```
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Authorization'
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
    post:
      tags:
      - Authorization
      summary: Create authorization
      description: |-
        based on authorization type.
        e.g payload ,
        auth_type: form
        ```
        {
            "resourceId": "63314e04674cdcaca7caace2",
            "resourceDetails": {},
            "roles": [
                "/formsflow/formsflow-reviewer",
                "/formsflow/formsflow-client"
            ]
        }
        ```
        auth_type: dashboard
        ```
        {
            "resourceId":"5",
            "resourceDetails":{"name":"New Business License Application"},
            "roles":["/formsflow-analytics/group1"]
        }
        ```
      operationId: post_authorization_list
      parameters:
      - name: auth_type
        in: path
        description: Type of authorization ```dashboard/form/application/designer```
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Authorization'
        required: true
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorization'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
      x-codegen-request-body-name: payload
  /authorizations/{auth_type}/{resource_id}:
    get:
      tags:
      - Authorization
      summary: Fetch Authorization details by resource id
      description: Fetch Authorization details based on authorization type - ```dashboard/form/application/designer```.
      operationId: get_authorization_detail
      parameters:
      - name: auth_type
        in: path
        description: Type of authorization
        required: true
        schema:
          type: string
      - name: resource_id
        in: path
        description: Authorization Details corresponding to resource id.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorization'
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
        "403":
          description: FORBIDDEN:- Permission denied
          content: {}
  /checkpoint:
    get:
      tags:
      - Checkpoint
      summary: Get the status of API
      operationId: get_health_checkpoint_resource
      responses:
        "200":
          description: Success
          content: {}
  /dashboards:
    get:
      tags:
      - Dashboards
      summary: List all dashboards
      operationId: get_dashboard_list
      parameters:
      - name: pageNo
        in: query
        description: Page number which starts from number 1 (optional).
        schema:
          type: string
      - name: limit
        in: query
        description: Number of items per page (optional).
        schema:
          type: string
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardList'
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
        "502":
          description: BAD_GATEWAY:- Invalid response from another service.
          content: {}
        "503":
          description: SERVICE_UNAVAILABLE:- Server cannot process te request.
          content: {}
  /dashboards/{dashboard_id}:
    get:
      tags:
      - Dashboards
      summary: Get dashboard by id
      operationId: get_dashboard_detail
      parameters:
      - name: dashboard_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
        "403":
          description: FORBIDDEN:- Authorization will not help.
          content: {}
        "502":
          description: BAD_GATEWAY:- Invalid response from another service.
          content: {}
        "503":
          description: SERVICE_UNAVAILABLE:- Server cannot process te request.
          content: {}
  /draft:
    post:
      tags:
      - Draft
      summary: Create a new draft
      operationId: post_draft_resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Draft'
        required: true
      responses:
        "201":
          description: CREATED:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DraftCreated'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
      x-codegen-request-body-name: payload
  /embed/external/application/create:
    post:
      tags:
      - Embed
      summary: Post a new application using the request body with external authentication
      description: |-
        : data: form submission data as a dict as in form submission data.
        : formId:- Unique Id for the corresponding form
        e.g,
        ```
        {
            "formId" : "632208d9fbcab29c2ab1a097",
            "data" : {
                "firstName" : "John",
                "lastName" : "Doe",
                "contact": {
                    "addressLine1": "1234 Street",
                    "email" : "john.doe@example.com"
                    }
                }
        }
        ```
      operationId: post_application_create_external
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationCreateExternal'
        required: true
      responses:
        "201":
          description: CREATED:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationCreateResponse'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
      x-codegen-request-body-name: payload
  /embed/external/form/{path}:
    get:
      tags:
      - Embed
      summary: Get form by form path with external authentication
      operationId: get_form_external
      parameters:
      - name: path
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK:- Successful request.
          content: {}
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
  /embed/internal/application/create:
    post:
      tags:
      - Embed
      summary: Post a new application using the request body with internal authentication
      description: |-
        : data: form submission data as a dict as in form submission data.
        : formId:- Unique Id for the corresponding form
        e.g,
        ```
        {
            "formId" : "632208d9fbcab29c2ab1a097",
            "data" : {
                "firstName" : "John",
                "lastName" : "Doe",
                "contact": {
                    "addressLine1": "1234 Street",
                    "email" : "john.doe@example.com"
                    }
                }
        }
        ```
      operationId: post_application_create_internal
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationCreateExternal'
        required: true
      responses:
        "201":
          description: CREATED:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationCreateResponse'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
      x-codegen-request-body-name: payload
  /embed/internal/form/{path}:
    get:
      tags:
      - Embed
      summary: Get form by form path with internal authentication
      operationId: get_form_internal
      parameters:
      - name: path
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK:- Successful request.
          content: {}
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
  /filter:
    get:
      tags:
      - Filter
      summary: Get all filters
      description: List all active filters for requests with ```view filter permission```.
      operationId: get_filter_resource
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FilterResponse'
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
        "403":
          description: FORBIDDEN:- Permission denied
          content: {}
    post:
      tags:
      - Filter
      summary: Create filter
      description: |-
        Post a new filter using request body for requests with ```create filter permission```.
        e.g payload,
        ```
        {
            "name": "Test Task",
            "description": "Filter creation test task",
            "variables":[
                    {
                    "name": "name",
                    "label": "userName"
                    }
                ],
            "criteria": {
                "candidateGroup":"/formsflow/formsflow-reviewer",
                "includeAssignedTasks":true
            },
            "properties": {
                "showUndefinedVariable":false
            },
            "users": [],
            "roles": ["/formsflow/formsflow-reviewer"],
            "isTasksForCurrentUserGroupsEnabled":true,
            "isMyTasksEnabled":true,
            "order": 1,
            "taskVisibleAttributes": {
                "applicationId": true,
                "assignee": true,
                "createdDate": true,
                "dueDate": true,
                "followUp": true,
                "priority": true
            }
        }
        ```
      operationId: post_filter_resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest'
        required: true
      responses:
        "201":
          description: CREATED:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilterResponse'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
        "403":
          description: FORBIDDEN:- Permission denied
          content: {}
      x-codegen-request-body-name: payload
  /filter/user:
    get:
      tags:
      - Filter
      summary: List filters of current user
      description: Get all active filters of current reviewer user for requests with
        ```view filter permission```.
      operationId: get_users_filter_list
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilterResponseWithDefaultFilter'
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
        "403":
          description: FORBIDDEN:- Permission denied
          content: {}
  /filter/{filter_id}:
    get:
      tags:
      - Filter
      summary: Get filter by id
      description: Get filter details corresponding to a filter id for requests with
        ```manage all filters``` permission.
      operationId: get_filter_resource_by_id
      parameters:
      - name: filter_id
        in: path
        description: Filter details corresponding to filter_id
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilterResponse'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
        "403":
          description: FORBIDDEN:- Permission denied
          content: {}
    put:
      tags:
      - Filter
      summary: Update filter by id
      description: Update filter details corresponding to a filter id for requests
        with ```create filter``` permission.
      operationId: put_filter_resource_by_id
      parameters:
      - name: filter_id
        in: path
        description: Filter details corresponding to filter_id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest'
        required: true
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilterResponse'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
        "403":
          description: FORBIDDEN:- Permission denied
          content: {}
      x-codegen-request-body-name: payload
    delete:
      tags:
      - Filter
      summary: Delete filter by id
      description: Delete filter corresponding to a filter id for requests with ```create
        filter``` permission.
      operationId: delete_filter_resource_by_id
      parameters:
      - name: filter_id
        in: path
        description: Filter details corresponding to filter_id
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: OK:- Successful request.
          content: {}
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
        "403":
          description: FORBIDDEN:- Permission denied
          content: {}
  /form:
    get:
      tags:
      - Form
      summary: List forms
      operationId: get_form_resource_list
      parameters:
      - name: pageNo
        in: query
        description: Page number for paginated results
        schema:
          type: string
          default: "1"
      - name: limit
        in: query
        description: Limit for paginated results
        schema:
          type: string
          default: "5"
      - name: sortBy
        in: query
        description: Name of column to sort by.
        schema:
          type: string
          default: id
      - name: sortOrder
        in: query
        description: Specify sorting order.
        schema:
          type: string
          default: desc
      - name: search
        in: query
        description: Retrieve form list based on form name or description.
        schema:
          type: string
      - name: showForOnlyCreateSubmissionUsers
        in: query
        description: Retrieve only active forms that the current user is authorized                                 to
          create submissions when set to True
        schema:
          type: string
          default: "false"
      - name: isActive
        in: query
        description: Filter authorized active/inactive forms.
        schema:
          type: string
          default: "null"
      - name: activeForms
        in: query
        description: Retrieve all active forms.
        schema:
          type: string
          default: "false"
      - name: includeSubmissionsCount
        in: query
        description: "Retrieve the submission count for the form,                \
          \                 applicable only to users with create submission permission."
        schema:
          type: string
          default: "false"
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormList'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
  /form/applicationid/{application_id}:
    get:
      tags:
      - Form
      summary: Retrieves task variables of a form based on application id
      operationId: get_form_resource_task_variablesby_application_id
      parameters:
      - name: application_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskVariableResponse'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
        "403":
          description: FORBIDDEN:- Authorization will not help.
          content: {}
  /form/form-design:
    post:
      tags:
      - Form
      summary: "Create a form with an associated flow, authorization rules, and history\
        \ tracking"
      operationId: post_formio_form_resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormCreateRequest'
        required: true
      responses:
        "201":
          description: CREATED:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormCreateResponse'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
        "403":
          description: FORBIDDEN:- Authorization will not help.
          content: {}
      x-codegen-request-body-name: payload
  /form/form-design/{form_id}:
    put:
      tags:
      - Form
      summary: Update form design and form history
      operationId: put_formio_form_update_resource
      parameters:
      - name: form_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormUpdateRequest'
        required: true
      responses:
        "200":
          description: CREATED:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormUpdate'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
        "403":
          description: FORBIDDEN:- Authorization will not help.
          content: {}
      x-codegen-request-body-name: payload
  /form/form-history/{form_id}:
    get:
      tags:
      - Form
      summary: Retrieve form history by form_id
      operationId: get_form_history_resource
      parameters:
      - name: form_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormHistoryResponse'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
        "403":
          description: FORBIDDEN:- Authorization will not help.
          content: {}
  /form/formid/{form_id}:
    get:
      tags:
      - Form
      summary: Retrieve form details using form_id
      description: ": form_id:- Get details of the form corresponding to a particular\
        \ formId"
      operationId: get_form_resource_by_form_id
      parameters:
      - name: form_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: CREATED:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MapperCreateResponse'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
        "403":
          description: FORBIDDEN:- Authorization will not help.
          content: {}
  /form/validate:
    get:
      tags:
      - Form
      summary: "Validates the form name, path and title"
      description: |-
        Retrieves query parameters, validates the form name, path, and title,
        and returns a response indicating validity..
      operationId: get_validate_form_name
      parameters:
      - name: title
        in: query
        description: Form title to be validated
        schema:
          type: string
      - name: name
        in: query
        description: Form name to be validated
        schema:
          type: string
      - name: path
        in: query
        description: Form path to be validated
        schema:
          type: string
      - name: parentFormId
        in: query
        description: Used for validating title against an existing form
        schema:
          type: string
      - name: id
        in: query
        description: "Form ID: Used for validating the path or name against an existing\
          \ form"
        schema:
          type: string
      responses:
        "200":
          description: OK:- Successful request.
          content: {}
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
        "403":
          description: FORBIDDEN:- Authorization will not help.
          content: {}
  /form/{mapper_id}:
    get:
      tags:
      - Form
      summary: Get form by mapper_id
      operationId: get_form_resource_by_id
      parameters:
      - name: mapper_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MapperCreateResponse'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
        "403":
          description: FORBIDDEN:- Authorization will not help.
          content: {}
    put:
      tags:
      - Form
      summary: Update form details and authorization by mapper_id
      operationId: put_form_resource_by_id
      parameters:
      - name: mapper_id
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MapperAuthorizationUpdateModel'
        required: true
      responses:
        "200":
          description: CREATED:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MapperUpdateResponseModel'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
        "403":
          description: FORBIDDEN:- Authorization will not help.
          content: {}
      x-codegen-request-body-name: payload
    delete:
      tags:
      - Form
      summary: Delete form by mapper_id
      operationId: delete_form_resource_by_id
      parameters:
      - name: mapper_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: OK:- Successful request.
          content: {}
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
        "403":
          description: FORBIDDEN:- Authorization will not help.
          content: {}
  /form/{mapper_id}/application/count:
    get:
      tags:
      - Form
      summary: Retrieves the total application count for the given mapper id
      operationId: get_form_resource_application_count
      parameters:
      - name: mapper_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationCount'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
        "403":
          description: FORBIDDEN:- Authorization will not help.
          content: {}
  /form/{mapper_id}/export:
    get:
      tags:
      - Form
      summary: Export form and workflow by mapper_id
      operationId: get_export_by_id
      parameters:
      - name: mapper_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportResponse'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
        "403":
          description: FORBIDDEN:- Authorization will not help.
          content: {}
  /form/{mapper_id}/publish:
    post:
      tags:
      - Form
      summary: Publish form and workflow by mapper_id
      operationId: post_publish_resource
      parameters:
      - name: mapper_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: OK:- Successful request.
          content: {}
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
        "403":
          description: FORBIDDEN:- Authorization will not help.
          content: {}
  /form/{mapper_id}/unpublish:
    post:
      tags:
      - Form
      summary: Unpublish form and workflow by mapper_id
      operationId: post_unpublish_resource
      parameters:
      - name: mapper_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: OK:- Successful request.
          content: {}
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
        "403":
          description: FORBIDDEN:- Authorization will not help.
          content: {}
  /formio/roles:
    get:
      tags:
      - Formio
      summary: Get formio role ids
      description: |-
        For requests with designer authorization, the server will send a response
        with role Ids of the following roles `DESIGNER`, `REVIEWER`, `CLIENT`,
        `ANONYMOUS` along with `RESOURCE_ID`.

        For requests without designer authorization, no resource / role Ids will be returned.
        This is because only designer will be expected to use the resource and role Ids.

        All successful response will contain `x-jwt-token` in the response header
        which is the formio token generated from the server.
      operationId: get_formio_resource
      responses:
        "200":
          description: OK:- Successful request.
          headers:
            x-jwt-token:
              description: Formio token
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Roles'
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
        "503":
          description: SERVICE_UNAVAILABLE:- Service failed to serve the request.
          content: {}
  /groups:
    get:
      tags:
      - Groups
      summary: GET request to fetch all dashboard authorized groups from Keycloak
      description: |-
        :params int pageNo: page number (optional)
        :params int limit: number of items per page (optional)
      operationId: get_keycloak_dashboard_group_list
      parameters:
      - name: pageNo
        in: query
        description: Page number which starts from number 1 (optional).
        schema:
          type: string
      - name: limit
        in: query
        description: Number of items per page (optional).
        schema:
          type: string
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
        "404":
          description: NOT_FOUND:- Resource not found.
          content: {}
  /import:
    post:
      tags:
      - Import
      summary: Import form and workflow
      description: |-
        Import payload given as form-data.
        e.g payload ,
        Validate new import
        :importType param - Specifies whether to import as a new layout or edit an existing one.
        :action param - Decide whether to validate the file or perform the import.
        ```
        file: importfile.json
        data: {"importType":"new","action":"validate"}
        ```
        Import as new form and workflow
        ```
        file: importfile.json
        data: {"importType":"new","action":"import"}
        ```
        Validate import to an existing layout
        ```
        :mapperId param - ID of the form mapper for the existing layout to edit.
        file: importfile.json
        data: {"importType":"edit","action":"validate","mapperId":"123"}

        ```
        Import to an existing layout.
        :skip param - Skip importing either the form or the workflow.
        :selectedVersion param - Import the form as a major or minor version.
        ```
        file: importfile.json
        data: {
                "importType":"edit","action":"import","mapperId":"1009",
                "form":{"skip":false,"selectedVersion":"major"},"workflow":{"skip":false}
                }
        ```
        eg: response for validate import
        ```
        {
            "form": {
                "majorVersion": 1,
                "minorVersion": 0
            },
            "workflow": {
                "majorVersion": 1,
                "minorVersion": 0
            }
        }
        ```
        eg: response for import
        ```
        {
        "mapper": {
            "formId": "67a4b59b5c702e11810149f9",
            "formName": "testimport",
            "formType": "form",
            ...}
        "process": {
            "name": "testimport",
            "processData": ""
            ...}
        }
        ```
      operationId: post_import
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - data
              - file
              type: object
              properties:
                file:
                  type: string
                  description: json file to import
                  format: binary
                data:
                  type: string
                  description: Determines import or validate the form/workflow as
                    new or to an existing layout.
                  default: "{\"importType\": \"new\", \"action\": \"validate\"}"
        required: true
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportValidateResponseModel'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
        "403":
          description: FORBIDDEN:- Authorization will not help.
          content: {}
  /integrations/embed/display:
    get:
      tags:
      - Integration
      summary: Return details on ipaas embed is enabled for the current user
      description: Return false to get the web going with implementation.
      operationId: get_display_embed
      responses:
        "200":
          description: OK:- Successful request.
          content: {}
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
  /metrics:
    get:
      tags:
      - Metrics
      summary: Get aggregated applications
      operationId: get_aggregated_applications_resource
      parameters:
      - name: pageNo
        in: query
        description: Page number for paginated results
        schema:
          type: string
          default: "1"
      - name: limit
        in: query
        description: Limit for paginated results
        schema:
          type: string
          default: "5"
      - name: from
        in: query
        description: From date for metrics filter.
        schema:
          type: string
          default: 2024-12-31T18:30:00+00:00
      - name: to
        in: query
        description: To date for metrics filter.
        schema:
          type: string
          default: 2025-02-01T18:30:00+00:00
      - name: sortBy
        in: query
        description: Specify field for sorting the results.
        schema:
          type: string
          default: formName
      - name: sortOrder
        in: query
        description: Specify sorting  order.
        schema:
          type: string
          default: desc
      - name: orderBy
        in: query
        description: Specifies whether to filter records by modified or created timestamp                                 within
          the provided date range (from and to).
        schema:
          type: string
          default: created
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsList'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
  /metrics/{form_id}:
    get:
      tags:
      - Metrics
      summary: Get application metrics corresponding to a form_id
      description: "Get summarized application status data with counts, filtered by\
        \ form_id or parent_form_id."
      operationId: get_aggregated_application_status_resource
      parameters:
      - name: form_id
        in: path
        required: true
        schema:
          type: string
      - name: from
        in: query
        description: From date for metrics filter.
        schema:
          type: string
          default: 2024-12-31T18:30:00+00:00
      - name: to
        in: query
        description: To date for metrics filter.
        schema:
          type: string
          default: 2025-02-01T18:30:00+00:00
      - name: orderBy
        in: query
        description: Specifies whether to filter records by modified or created timestamp                                 within
          the provided date range (from and to).
        schema:
          type: string
          default: created
      - name: formType
        in: query
        description: Determines whether to filter by form_id or parent_form_id                                 based
          on the provided formType(form/parent).
        schema:
          type: string
          default: form
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsDetail'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
        "403":
          description: FORBIDDEN:- Authorization will not help.
          content: {}
  /process:
    get:
      tags:
      - Process
      summary: List all process data
      operationId: get_process_data_resource
      parameters:
      - name: pageNo
        in: query
        description: Page number for paginated results
        schema:
          type: string
          default: "1"
      - name: limit
        in: query
        description: Limit for paginated results
        schema:
          type: string
          default: "5"
      - name: sortBy
        in: query
        description: Name of column to sort by.
        schema:
          type: string
          default: id
      - name: sortOrder
        in: query
        description: Specify sorting  order.
        schema:
          type: string
          default: desc
      - name: name
        in: query
        description: Retrieve form list based on process name.
        schema:
          type: string
      - name: processType
        in: query
        description: Retrieve form list based on process type.
        schema:
          type: string
          default: BPMN
          enum:
          - BPMN
          - DMN
          - LOWCODE
      - name: status
        in: query
        description: Retrieve form list based on status.
        schema:
          type: string
          enum:
          - Draft
          - Published
      - name: id
        in: query
        description: Filter process by id.
        schema:
          type: integer
      - name: modifiedFrom
        in: query
        description: Filter process by modified from.
        schema:
          type: string
      - name: modifiedTo
        in: query
        description: Filter process by modified to.
        schema:
          type: string
      - name: createdFrom
        in: query
        description: Filter process by created from.
        schema:
          type: string
      - name: createdTo
        in: query
        description: Filter process by created to.
        schema:
          type: string
      - name: createdBy
        in: query
        description: Filter process by created by.
        schema:
          type: string
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessList'
        "403":
          description: FORBIDDEN:- Permission denied
          content: {}
    post:
      tags:
      - Process
      summary: Create process data
      operationId: post_process_data_resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessRequest'
        required: true
      responses:
        "201":
          description: CREATED:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessResponse'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
      x-codegen-request-body-name: payload
  /process/key/{process_key}:
    get:
      tags:
      - Process
      summary: Get process data by process key
      operationId: get_process_resource_by_process_key
      parameters:
      - name: process_key
        in: path
        description: Process data corresponding to process key
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessResponse'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "403":
          description: FORBIDDEN:- Permission denied
          content: {}
  /process/migrate:
    post:
      tags:
      - Process
      summary: Migrate process by process_key
      operationId: post_migrate_resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MigrateRequestModel'
        required: true
      responses:
        "200":
          description: OK:- Successful request.
          content: {}
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
        "403":
          description: FORBIDDEN:- Authorization will not help.
          content: {}
      x-codegen-request-body-name: payload
  /process/validate:
    get:
      tags:
      - Process
      summary: Validates process name or process key
      description: |-
        Retrieves the query parameters from the request, validates the process name or key,
        and returns a response indicating whether the process name/key is valid or not.
      operationId: get_validate_process
      parameters:
      - name: processKey
        in: query
        description: processKey to be validated
        schema:
          type: string
      - name: processName
        in: query
        description: processName to be validated
        schema:
          type: string
      - name: parentProcessKey
        in: query
        description: Used for validating title against an existing process
        schema:
          type: string
      responses:
        "200":
          description: OK:- Successful request.
          content: {}
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
        "403":
          description: FORBIDDEN:- Authorization will not help.
          content: {}
  /process/{parent_process_key}/versions:
    get:
      tags:
      - Process
      summary: 'Get history for a process by parent_process_key '
      operationId: get_process_history_resource
      parameters:
      - name: parent_process_key
        in: path
        required: true
        schema:
          type: string
      - name: pageNo
        in: query
        description: Page number for paginated results
        schema:
          type: string
      - name: limit
        in: query
        description: Limit for paginated results
        schema:
          type: string
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessHistoryResponse'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
        "403":
          description: FORBIDDEN:- Permission denied.
          content: {}
  /process/{process_id}:
    get:
      tags:
      - Process
      summary: Get process data by process id
      operationId: get_process_resource_by_id
      parameters:
      - name: process_id
        in: path
        description: Process data corresponding to process id
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessResponse'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "403":
          description: FORBIDDEN:- Permission denied
          content: {}
    put:
      tags:
      - Process
      summary: Update process data by id
      operationId: put_process_resource_by_id
      parameters:
      - name: process_id
        in: path
        description: Process data corresponding to process id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessRequest'
        required: true
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessResponse'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "403":
          description: FORBIDDEN:- Permission denied
          content: {}
      x-codegen-request-body-name: payload
    delete:
      tags:
      - Process
      summary: Delete process data by id
      operationId: delete_process_resource_by_id
      parameters:
      - name: process_id
        in: path
        description: Process data corresponding to process id
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: OK:- Successful request.
          content: {}
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "403":
          description: FORBIDDEN:- Permission denied
          content: {}
  /process/{process_id}/publish:
    post:
      tags:
      - Process
      summary: Publish process by process id
      operationId: post_publish_process_resource
      parameters:
      - name: process_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK:- Successful request.
          content: {}
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
        "403":
          description: FORBIDDEN:- Authorization will not help.
          content: {}
  /process/{process_id}/unpublish:
    post:
      tags:
      - Process
      summary: Unpublish process by process_id
      operationId: post_unpublish_process_resource
      parameters:
      - name: process_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK:- Successful request.
          content: {}
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
        "403":
          description: FORBIDDEN:- Authorization will not help.
          content: {}
  /public/application/create:
    post:
      tags:
      - Public
      summary: Post a new anonymous application using the request body
      operationId: post_application_anonymous_resources_by_ids
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnonymousApplicationCreate'
        required: true
      responses:
        "201":
          description: CREATED:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnonymousApplicationCreateResponse'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
      x-codegen-request-body-name: payload
  /public/application/{application_id}:
    put:
      tags:
      - Public
      summary: Update draft details
      operationId: put_public_draft_update_resource_by_id
      parameters:
      - name: application_id
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DraftUpdate'
        required: true
      responses:
        "200":
          description: "OK:- Successful request. Returns ```str: success message```"
          content: {}
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
      x-codegen-request-body-name: payload
  /public/application/{application_id}/submit:
    put:
      tags:
      - Public
      summary: Updates the draft entry to actual submission
      operationId: put_public_draft_submission_resource
      parameters:
      - name: application_id
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnonymousApplicationCreate'
        required: true
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnonymousApplicationCreateResponse'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
      x-codegen-request-body-name: payload
  /public/draft:
    post:
      tags:
      - Public
      summary: Create a new anonymous draft submission
      operationId: post_public_draft_resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Draft'
        required: true
      responses:
        "201":
          description: CREATED:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DraftCreated'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
      x-codegen-request-body-name: payload
  /public/form/{form_id}:
    get:
      tags:
      - Public
      summary: Check if the form is anonymous and published
      operationId: get_anonymous_resource_by_id
      parameters:
      - name: form_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckStatus'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
  /public/themes:
    get:
      tags:
      - Public
      summary: Get theme by tenant key
      operationId: get_public_theme_customization_resource
      parameters:
      - name: tenantKey
        in: query
        description: Specify tenant key.
        schema:
          type: string
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThemeResponseModel'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
        "403":
          description: FORBIDDEN:- Permission denied
          content: {}
  /roles:
    get:
      tags:
      - Roles
      summary: Fetch all groups from Keycloak
      operationId: get_keycloak_roles_resource
      parameters:
      - name: sortOrder
        in: query
        description: Specify sorting order.
        schema:
          type: string
          default: asc
      - name: search
        in: query
        description: Retrieve list based on role name search.
        schema:
          type: string
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/roles_response'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
    post:
      tags:
      - Roles
      summary: Create group in keycloak
      operationId: post_keycloak_roles_resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/roles_request'
        required: true
      responses:
        "201":
          description: CREATED:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createRoleResponse'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
      x-codegen-request-body-name: payload
  /roles/permissions:
    get:
      tags:
      - Roles
      summary: Fetch the list of permissions
      operationId: get_permissions
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionResponseModel'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
  /roles/{role_id}:
    get:
      tags:
      - Roles
      summary: Get keycloak group by id
      operationId: get_keycloak_roles_resource_by_id
      parameters:
      - name: role_id
        in: path
        description: Group/Role details corresponding to group_id/role name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/roles_response'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
    put:
      tags:
      - Roles
      summary: Update keycloak group by id
      operationId: put_keycloak_roles_resource_by_id
      parameters:
      - name: role_id
        in: path
        description: Group/Role details corresponding to group_id/role name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/roles_request'
        required: true
      responses:
        "200":
          description: OK:- Successful request.
          content: {}
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
      x-codegen-request-body-name: payload
    delete:
      tags:
      - Roles
      summary: Delete keycloak group by id
      operationId: delete_keycloak_roles_resource_by_id
      parameters:
      - name: role_id
        in: path
        description: Group/Role details corresponding to group_id/role name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK:- Successful request.
          content: {}
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
  /themes:
    put:
      tags:
      - Themes
      summary: Update Theme
      operationId: put_theme_customization_resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Themes'
        required: true
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThemeResponse'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
        "403":
          description: FORBIDDEN:- Permission denied
          content: {}
      x-codegen-request-body-name: payload
    post:
      tags:
      - Themes
      summary: Create Theme
      operationId: post_theme_customization_resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Themes'
        required: true
      responses:
        "201":
          description: CREATED:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThemeResponse'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
        "403":
          description: FORBIDDEN:- Permission denied
          content: {}
      x-codegen-request-body-name: payload
  /user:
    get:
      tags:
      - User
      summary: Get users list
      operationId: get_keycloak_users_list
      parameters:
      - name: memberOfGroup
        in: query
        description: Group name for fetching users.
        schema:
          type: string
      - name: search
        in: query
        description: "A String contained in username, first or last name, or email."
        schema:
          type: string
      - name: pageNo
        in: query
        description: Page number.
        schema:
          type: string
          default: "1"
      - name: limit
        in: query
        description: Max result size.
        schema:
          type: string
          default: "5"
      - name: role
        in: query
        description: Boolean which defines whether roles are returned.
        schema:
          type: string
          default: "false"
      - name: count
        in: query
        description: Boolean which defines whether count is returned.
        schema:
          type: string
          default: "false"
      - name: permission
        in: query
        description: Filter user by permission.
        schema:
          type: string
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
  /user/add-user:
    post:
      tags:
      - User
      summary: Add user to tenant
      operationId: post_tenant_add_user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddUserToTenant'
        required: true
      responses:
        "200":
          description: OK:- Successful request.
          content: {}
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
      x-codegen-request-body-name: payload
  /user/default-filter:
    post:
      tags:
      - User
      summary: Update the user's default task filter
      operationId: post_user_default_filter
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DefaulFilter'
        required: true
      responses:
        "200":
          description: OK:- Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaulFilterResponse'
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
      x-codegen-request-body-name: payload
  /user/locale:
    put:
      tags:
      - User
      summary: Update the user locale attribute
      operationId: put_keycloak_user_service
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Locale'
        required: true
      responses:
        "200":
          description: OK:- Successful request.
          content: {}
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
      x-codegen-request-body-name: payload
  /user/{user_id}/permission/groups/{group_id}:
    put:
      tags:
      - User
      summary: Add users to group
      operationId: put_user_permission
      parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: string
      - name: group_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPermission'
        required: true
      responses:
        "204":
          description: NO CONTENT:- Successful request.
          content: {}
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
      x-codegen-request-body-name: payload
    delete:
      tags:
      - User
      summary: Remove users from group
      operationId: delete_user_permission
      parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: string
      - name: group_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: NO CONTENT:- Successful request.
          content: {}
        "400":
          description: BAD_REQUEST:- Invalid request.
          content: {}
        "401":
          description: UNAUTHORIZED:- Authorization header not provided or an invalid
            token passed.
          content: {}
components:
  schemas:
    ApplicationList:
      type: object
      properties:
        applications:
          type: array
          items:
            type: object
            description: List of Applications.
            allOf:
            - $ref: '#/components/schemas/Application'
        totalCount:
          type: integer
        limit:
          type: integer
        pageNo:
          type: integer
    Application:
      allOf:
      - $ref: '#/components/schemas/ApplicationCreationResponse'
      - type: object
        properties:
          applicationName:
            type: string
          processKey:
            type: string
          processName:
            type: string
          processTenant:
            type: string
    ApplicationCreationResponse:
      type: object
      properties:
        applicationStatus:
          type: string
        created:
          type: string
        createdBy:
          type: string
        formId:
          type: string
        formProcessMapperId:
          type: string
        id:
          type: integer
        modified:
          type: string
        modifiedBy:
          type: string
        processInstanceId:
          type: string
        submissionId:
          type: string
        isResubmit:
          type: boolean
        eventName:
          type: string
        isDraft:
          type: boolean
    ApplicationUpdate:
      type: object
      properties:
        applicationStatus:
          type: string
        formUrl:
          type: string
        data:
          type: object
          properties: {}
    Message:
      type: object
      properties:
        message:
          type: string
    ApplicationCountModel:
      allOf:
      - $ref: '#/components/schemas/Message'
      - type: object
        properties:
          value:
            type: integer
    ApplicationCreate:
      type: object
      properties:
        data:
          type: object
          properties: {}
        formId:
          type: string
        submissionId:
          type: string
        formUrl:
          type: string
        webFormUrl:
          type: string
    StatusList:
      type: object
      properties:
        applicationStatus:
          type: array
          items:
            type: string
    ApplicationResubmitModel:
      type: object
      properties:
        processInstanceId:
          type: string
        messageName:
          type: string
        data:
          type: object
          properties: {}
    ApplicationHistoryCreate:
      type: object
      properties:
        applicationStatus:
          type: string
        formUrl:
          type: string
        submittedBy:
          type: string
    ApplicationHistory:
      type: object
      properties:
        applicationStatus:
          type: string
        created:
          type: string
        formId:
          type: string
        formUrl:
          type: string
        submissionId:
          type: string
        submittedBy:
          type: string
        color:
          type: string
        percentage:
          type: number
    ApplicationHistoryList:
      type: object
      properties:
        applications:
          type: array
          items:
            type: object
            description: Application History
            allOf:
            - $ref: '#/components/schemas/ApplicationHistory'
    MetricsList:
      type: object
      properties:
        applications:
          type: array
          items:
            $ref: '#/components/schemas/Metrics'
        limit:
          type: integer
        pageNo:
          type: integer
        totalCount:
          type: integer
    Metrics:
      type: object
      properties:
        formversions:
          type: array
          items:
            $ref: '#/components/schemas/FormVersions'
        formName:
          type: string
        parentFormId:
          type: integer
        applicationCount:
          type: string
    FormVersions:
      type: object
      properties:
        formId:
          type: string
        version:
          type: integer
    MetricsDetail:
      type: object
      properties:
        applications:
          type: array
          items:
            $ref: '#/components/schemas/MetricsDetailMapper'
    MetricsDetailMapper:
      type: object
      properties:
        count:
          type: integer
        statusName:
          type: string
    DashboardList:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/DashboardBase'
        count:
          type: integer
        page:
          type: integer
        page_size:
          type: integer
    DashboardBase:
      type: object
      properties:
        created_at:
          type: string
        dashboard_filters_enabled:
          type: boolean
        id:
          type: integer
        is_archived:
          type: boolean
        is_draft:
          type: boolean
        is_favorite:
          type: boolean
        layout:
          type: array
          items:
            type: object
            properties: {}
        name:
          type: string
        slug:
          type: string
        options:
          type: object
          properties: {}
        tags:
          type: array
          items:
            type: string
        updated_at:
          type: string
        user:
          $ref: '#/components/schemas/User'
        user_id:
          type: integer
        version:
          type: integer
    User:
      type: object
      properties:
        email:
          type: string
        id:
          type: integer
        name:
          type: string
        profile_image_url:
          type: string
    Dashboard:
      allOf:
      - $ref: '#/components/schemas/DashboardBase'
      - type: object
        properties:
          can_edit:
            type: boolean
          widgets:
            type: array
            items:
              type: object
              properties: {}
    FormList:
      type: object
      properties:
        forms:
          type: array
          items:
            $ref: '#/components/schemas/Form'
        totalCount:
          type: integer
        pageNo:
          type: integer
        limit:
          type: integer
    Form:
      type: object
      properties:
        formId:
          type: string
        formName:
          type: string
        id:
          type: string
        processKey:
          type: string
        formType:
          type: string
        created:
          type: string
        modified:
          type: string
        anonymous:
          type: boolean
        status:
          type: string
        description:
          type: string
    MapperAuthorizationUpdateModel:
      type: object
      properties:
        mapper:
          $ref: '#/components/schemas/MapperUpdate'
        authorizations:
          $ref: '#/components/schemas/AuthorizationList'
    MapperUpdate:
      type: object
      properties:
        formId:
          type: string
        formName:
          type: string
        description:
          type: string
        status:
          type: string
        taskVariable:
          type: string
        anonymous:
          type: boolean
        processKey:
          type: string
        processName:
          type: string
        id:
          type: string
        formType:
          type: string
        majorVersion:
          type: integer
        minorVersion:
          type: integer
        parentFormId:
          type: string
        taskVariables:
          type: array
          items:
            $ref: '#/components/schemas/TaskVariables'
    TaskVariables:
      type: object
      properties:
        key:
          type: string
        label:
          type: string
        type:
          type: string
    AuthorizationList:
      type: object
      properties:
        APPLICATION:
          $ref: '#/components/schemas/Authorization'
        FORM:
          $ref: '#/components/schemas/Authorization'
        DESIGNER:
          $ref: '#/components/schemas/Authorization'
    Authorization:
      type: object
      properties:
        resourceId:
          type: string
        resourceDetails:
          $ref: '#/components/schemas/resource_details'
        roles:
          type: array
          items:
            type: string
        userName:
          type: string
    resource_details:
      type: object
      properties:
        name:
          type: string
    MapperUpdateResponseModel:
      type: object
      properties:
        mapper:
          $ref: '#/components/schemas/MapperCreateResponse'
        authorizations:
          $ref: '#/components/schemas/AuthorizationList'
    MapperCreateResponse:
      type: object
      properties:
        anonymous:
          type: boolean
        comments:
          type: string
        created:
          type: string
        createdBy:
          type: string
        formId:
          type: string
        formName:
          type: string
        id:
          type: string
        modified:
          type: string
        modifiedBy:
          type: string
        processKey:
          type: string
        processName:
          type: string
        processTenant:
          type: string
        status:
          type: string
        taskVariables:
          type: array
          items:
            $ref: '#/components/schemas/TaskVariables'
        version:
          type: string
        promptNewVersion:
          type: boolean
          default: false
        deleted:
          type: boolean
          default: false
        description:
          type: string
        isMigrated:
          type: boolean
        majorVersion:
          type: integer
        minorVersion:
          type: integer
    ApplicationCount:
      type: object
      properties:
        message:
          type: string
        value:
          type: integer
    TaskVariableResponse:
      type: object
      properties:
        id:
          type: string
        formType:
          type: string
        processName:
          type: string
        processKey:
          type: string
        processTenant:
          type: string
        taskVariables:
          type: string
    FormCreateRequest:
      allOf:
      - $ref: '#/components/schemas/FormCreate'
      - type: object
        properties:
          newVersion:
            type: boolean
    FormCreate:
      type: object
      properties:
        title:
          type: string
        tags:
          type: array
          items:
            type: string
        submissionAccess:
          type: array
          items:
            $ref: '#/components/schemas/SubmissionAccess'
        path:
          type: string
        name:
          type: string
        display:
          type: string
        components:
          type: array
          items:
            type: object
            properties: {}
        access:
          type: array
          items:
            $ref: '#/components/schemas/SubmissionAccess'
    SubmissionAccess:
      type: object
      properties:
        type:
          type: string
        roles:
          type: array
          items:
            type: string
    FormCreateResponse:
      allOf:
      - $ref: '#/components/schemas/FormCreate'
      - type: object
        properties:
          _id:
            type: string
          isBundle:
            type: boolean
            default: false
          machineName:
            type: string
          owner:
            type: string
          created:
            type: string
            description: Date string
          modified:
            type: string
            description: Date string
    FormUpdateRequest:
      allOf:
      - $ref: '#/components/schemas/FormUpdate'
      - type: object
        properties:
          componentChanged:
            type: boolean
    FormUpdate:
      allOf:
      - $ref: '#/components/schemas/FormCreateResponse'
      - type: object
        properties:
          parentFormId:
            type: string
    FormHistoryResponse:
      type: object
      properties:
        formHistory:
          type: array
          items:
            $ref: '#/components/schemas/FormHistory'
        totalCount:
          type: integer
    FormHistory:
      type: object
      properties:
        id:
          type: string
        formId:
          type: string
        createdBy:
          type: string
        created:
          type: string
        changeLog:
          $ref: '#/components/schemas/formHistoryChangeLog'
        majorVersion:
          type: integer
        minorVersion:
          type: integer
        isMajor:
          type: boolean
        version:
          type: string
    formHistoryChangeLog:
      type: object
      properties:
        clone_id:
          type: string
        new_version:
          type: boolean
    ExportResponse:
      type: object
      properties:
        forms:
          type: array
          items:
            $ref: '#/components/schemas/FormsListModel'
        workflows:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowsList'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/DMNList'
        authorizations:
          type: array
          items:
            $ref: '#/components/schemas/AuthorizationList'
    FormsListModel:
      type: object
      properties:
        formTitle:
          type: string
        formDescription:
          type: string
        anonymous:
          type: boolean
        type:
          type: string
        content:
          type: object
          properties: {}
    WorkflowsList:
      type: object
      properties:
        processKey:
          type: string
        processName:
          type: string
        processType:
          type: string
        type:
          type: string
        content:
          type: string
    DMNList:
      type: object
      properties:
        key:
          type: string
        type:
          type: string
        content:
          type: string
    Group:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        path:
          type: string
        subGroups:
          type: array
          items:
            type: string
    ProcessRequest:
      type: object
      properties:
        processType:
          type: string
          description: Process Type - BPMN/DMN/LOWCODE
          default: BPMN
        processData:
          type: string
          description: Process data
    ProcessResponse:
      allOf:
      - $ref: '#/components/schemas/BaseProcessResponse'
      - type: object
        properties:
          processData:
            type: string
            description: Process data
    BaseProcessResponse:
      type: object
      properties:
        id:
          type: integer
          description: Unique id of the process
        name:
          type: string
          description: Process name
        status:
          type: string
          description: Process status
        processType:
          type: string
        tenant:
          type: string
          description: Authorized Tenant to the process
        created:
          type: string
          description: Created time
          format: date-time
        modified:
          type: string
          description: Modified time
          format: date-time
        createdBy:
          type: string
        modifiedBy:
          type: string
        processKey:
          type: string
        parentProcessKey:
          type: string
        isSubflow:
          type: boolean
    ProcessList:
      type: object
      properties:
        process:
          type: array
          items:
            $ref: '#/components/schemas/BaseProcessResponse'
        totalCount:
          type: integer
    ProcessHistoryResponse:
      type: object
      properties:
        processHistory:
          type: array
          items:
            $ref: '#/components/schemas/ProcessHistory'
        totalCount:
          type: integer
    ProcessHistory:
      type: object
      properties:
        id:
          type: integer
          description: Unique id of the process
        created:
          type: string
          description: Created time
          format: date-time
        createdBy:
          type: string
        processType:
          type: string
          description: Process Type
        processName:
          type: string
        majorVersion:
          type: integer
        minorVersion:
          type: integer
        isMajor:
          type: boolean
        publishedBy:
          type: string
        publishedOn:
          type: string
        modified:
          type: string
    MigrateRequestModel:
      type: object
      properties:
        mapperId:
          type: string
        processKey:
          type: string
    AnonymousApplicationCreate:
      type: object
      properties:
        data:
          type: object
          properties: {}
        formId:
          type: string
        submissionId:
          type: string
        formUrl:
          type: string
        webFormUrl:
          type: string
    AnonymousApplicationCreateResponse:
      type: object
      properties:
        applicationStatus:
          type: string
        created:
          type: string
        createdBy:
          type: string
        formId:
          type: string
        formProcessMapperId:
          type: string
        id:
          type: integer
        modified:
          type: string
        modifiedBy:
          type: string
        processInstanceId:
          type: string
        submissionId:
          type: string
        isResubmit:
          type: boolean
        eventName:
          type: string
        isDraft:
          type: boolean
    CheckStatus:
      type: object
      properties:
        is_anonymous:
          type: boolean
        status:
          type: string
    Draft:
      type: object
      properties:
        data:
          type: object
          properties: {}
        formId:
          type: string
    DraftCreated:
      type: object
      properties:
        applicationId:
          type: integer
        created:
          type: string
        data:
          type: object
          properties: {}
        id:
          type: integer
        modified:
          type: string
        _id:
          type: string
    DraftUpdate:
      type: object
      properties:
        data:
          type: object
          properties: {}
    ThemeResponseModel:
      type: object
      properties:
        logoName:
          type: string
        type:
          type: string
        value:
          type: string
        applicationTitle:
          type: string
        themeJson:
          type: object
          properties: {}
        logoData:
          type: string
        id:
          type: integer
        created_by:
          type: string
        tenant:
          type: string
    Locale:
      type: object
      properties:
        locale:
          type: string
    DefaulFilter:
      type: object
      properties:
        defaultFilter:
          type: integer
    DefaulFilterResponse:
      allOf:
      - $ref: '#/components/schemas/DefaulFilter'
      - type: object
        properties:
          userName:
            type: string
          locale:
            type: string
    List:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserList'
        count:
          type: integer
    UserList:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        username:
          type: string
    UserPermission:
      type: object
      properties:
        userId:
          type: string
        groupId:
          type: string
        name:
          type: string
    AddUserToTenant:
      type: object
      properties:
        user:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/rolesData'
    rolesData:
      type: object
      properties:
        name:
          type: string
        roleId:
          type: string
    Roles:
      type: object
      properties:
        form:
          type: array
          items:
            type: object
            description: List of role / resource Ids
            allOf:
            - $ref: '#/components/schemas/Role'
    Role:
      type: object
      properties:
        roleId:
          type: string
          description: The role or resource Id
        type:
          type: string
          description: The Id type
          example: DESIGNER
          enum:
          - DESIGNER
          - ANONYMOUS
          - CLIENT
          - REVIEWER
          - RESOURCE_ID
    FilterRequest:
      allOf:
      - $ref: '#/components/schemas/FilterBaseModel'
      - type: object
        properties:
          isMyTasksEnabled:
            type: boolean
          isTasksForCurrentUserGroupsEnabled:
            type: boolean
    FilterBaseModel:
      type: object
      properties:
        name:
          type: string
          description: Name of the filter
        description:
          type: string
          description: Description about filter
        criteria:
          type: object
          description: Filter criteria
          allOf:
          - $ref: '#/components/schemas/Criteria'
        variables:
          type: array
          items:
            type: object
            description: ' Variables shown in the tasks list'
            allOf:
            - $ref: '#/components/schemas/Variables'
        properties:
          type: object
          description: Properties of filter
          allOf:
          - $ref: '#/components/schemas/Properties'
        roles:
          type: array
          description: Authorized Roles to the filter
          items:
            type: string
        users:
          type: array
          description: Authorized Users to the filter
          items:
            type: string
        taskVisibleAttributes:
          type: object
          description: Visible attributes in task
          allOf:
          - $ref: '#/components/schemas/taskVisibleAttributes'
        order:
          type: integer
          description: Filter display order
    Criteria:
      type: object
      properties:
        candidateGroupsExpression:
          type: string
          description: Filter task specific to group
        includeAssignedTasks:
          type: boolean
          description: Include assigned task
    Variables:
      type: object
      properties:
        name:
          type: string
          description: Variable name
        label:
          type: string
          description: Display name
    Properties:
      type: object
      properties:
        showUndefinedVariable:
          type: boolean
          description: Show undefined variables
    taskVisibleAttributes:
      type: object
      properties:
        applicationId:
          type: boolean
        assignee:
          type: boolean
        createdDate:
          type: boolean
        dueDate:
          type: boolean
        followUp:
          type: boolean
        priority:
          type: boolean
    FilterResponse:
      allOf:
      - $ref: '#/components/schemas/FilterBaseModel'
      - type: object
        properties:
          status:
            type: string
            description: Status of the filter
          tenant:
            type: string
            description: Authorized Tenant to the filter
          id:
            type: integer
            description: Unique id of the filter
          created:
            type: string
            description: Created time
            format: date-time
          modified:
            type: string
            description: Modified time
            format: date-time
          createdBy:
            type: string
          modifiedBy:
            type: string
    FilterResponseWithDefaultFilter:
      type: object
      properties:
        filters:
          type: array
          items:
            $ref: '#/components/schemas/FilterResponse'
        defaultFilter:
          type: string
          description: Default filter
    roles_request:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        permissions:
          type: array
          items:
            type: string
    createRoleResponse:
      type: object
      properties:
        id:
          type: string
    roles_response:
      allOf:
      - $ref: '#/components/schemas/roles_request'
      - type: object
        properties:
          id:
            type: string
    PermissionResponseModel:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        depends_on:
          type: array
          items:
            type: string
    ApplicationCreateExternal:
      type: object
      properties:
        formId:
          type: string
        data:
          type: object
          properties: {}
    ApplicationCreateResponse:
      type: object
      properties:
        applicationStatus:
          type: string
        created:
          type: string
        createdBy:
          type: string
        formId:
          type: string
        formProcessMapperId:
          type: string
        id:
          type: integer
        modified:
          type: string
        modifiedBy:
          type: string
        processInstanceId:
          type: string
        submissionId:
          type: string
        isResubmit:
          type: boolean
        eventName:
          type: string
        isDraft:
          type: boolean
    Themes:
      type: object
      properties:
        logoName:
          type: string
        type:
          type: string
        value:
          type: string
        applicationTitle:
          type: string
        themeJson:
          type: object
          properties: {}
        logoData:
          type: string
    ThemeResponse:
      allOf:
      - $ref: '#/components/schemas/Themes'
      - type: object
        properties:
          id:
            type: integer
          created_by:
            type: string
          tenant:
            type: string
    ImportValidateResponseModel:
      type: object
      properties:
        form:
          $ref: '#/components/schemas/VersionModel'
        workflow:
          $ref: '#/components/schemas/VersionModel'
    VersionModel:
      type: object
      properties:
        majorVersion:
          type: integer
        minorVersion:
          type: integer
  responses:
    ParseError:
      description: When a mask can't be parsed
      content: {}
    MaskError:
      description: When any error occurs on mask
      content: {}
    AuthError:
      description: Handle auth error
      content: {}
    BusinessException:
      description: Handle business exception
      content: {}
    ValidationError:
      description: Handle validation error
      content: {}
    KeyError:
      description: Handle key error
      content: {}
    HTTPError:
      description: Handle http error
      content: {}
  securitySchemes:
    apikey:
      type: apiKey
      name: Authorization
      in: header
